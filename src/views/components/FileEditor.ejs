<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

<script>
    let currentPath = '';
    let currentFile = null;

    marked.setOptions({
        breaks: true,
        gfm: true,
        headerIds: true,
        mangle: false
    });

    async function loadContents(path = '') {
        const browser = document.getElementById('file-browser');
        browser.innerHTML = '<div class="loading loading-spinner loading-md"></div>';

        try {
            const [owner, repo] = '${locals.user.selected_repo}'.split('/');
            const response = await fetch(`/github/files/contents/${owner}/${repo}/${path}`);
            if (!response.ok) throw new Error('Failed to load contents');
            
            const contents = await response.json();
            
            if (Array.isArray(contents)) {
                currentPath = path;
                browser.innerHTML = await renderFileTree(contents, path);
            }
        } catch (error) {
            console.error('Error loading contents:', error);
            browser.innerHTML = renderError('Failed to load repository contents', error.message);
        }
    }

    function renderFileTree(contents, path) {
        const items = contents
            .sort((a, b) => {
                if (a.type === b.type) return a.name.localeCompare(b.name);
                return a.type === 'dir' ? -1 : 1;
            })
            .map(item => renderFileItem(item))
            .join('');

        return `
            ${path ? renderBackButton(path) : ''}
            <div class="space-y-1">
                ${items}
            </div>
        `;
    }

    function renderFileItem(item) {
        if (item.type === 'dir') {
            return `
                <div class="cursor-pointer hover:bg-base-200 p-2 rounded flex items-center" 
                     onclick="loadContents('${item.path}')">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z" />
                    </svg>
                    ${item.name}
                </div>
            `;
        } else {
            const isMDX = item.fileType === 'mdx';
            return `
                <div class="cursor-pointer hover:bg-base-200 p-2 rounded flex items-center justify-between group" 
                     onclick="loadFile('${item.path}')">
                    <div class="flex items-center">
                        <svg class="w-4 h-4 mr-2 ${isMDX ? 'text-primary' : ''}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        ${item.name}
                    </div>
                    <span class="badge badge-sm ${isMDX ? 'badge-primary' : 'badge-ghost'} opacity-0 group-hover:opacity-100">
                        ${isMDX ? 'MDX' : 'MD'}
                    </span>
                </div>
            `;
        }
    }

    function renderBackButton(path) {
        return `
            <div class="cursor-pointer hover:bg-base-200 p-2 rounded flex items-center" 
                 onclick="loadContents('${path.split('/').slice(0, -1).join('/')}')">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 15l-3-3m0 0l3-3m-3 3h8M3 12a9 9 0 1118 0 9 9 0 01-18 0z" />
                </svg>
                Back
            </div>
            <div class="divider my-2"></div>
        `;
    }

    function renderError(title, message) {
        return `
            <div class="alert alert-error">
                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <div>
                    <h3 class="font-bold">${title}</h3>
                    <div class="text-sm">${message}</div>
                </div>
                <button onclick="loadContents('${currentPath}')" class="btn btn-sm">Retry</button>
            </div>
        `;
    }

    async function loadFile(path) {
        const editor = document.getElementById('editor');
        editor.innerHTML = '<div class="flex items-center justify-center h-full"><div class="loading loading-spinner loading-lg"></div></div>';

        try {
            const response = await fetch(`/github/files/file?path=${path}&repo=${locals.user.selected_repo}`);
            if (!response.ok) throw new Error('Failed to load file');
            
            const { frontMatter, content, sha, type } = await response.json();
            currentFile = { path, sha, type };
            
            editor.innerHTML = renderEditor(path, frontMatter, content, type);
            updatePreview();
        } catch (error) {
            console.error('Error loading file:', error);
            editor.innerHTML = renderError('Failed to load file', error.message);
        }
    }

    function renderEditor(path, frontMatter, content, type) {
        return `
            <div class="space-y-4">
                <div class="flex justify-between items-center">
                    <div class="flex items-center gap-2">
                        <h3 class="font-bold">${path}</h3>
                        <div class="badge badge-sm ${type === 'mdx' ? 'badge-primary' : 'badge-ghost'}">
                            ${type === 'mdx' ? 'MDX' : 'MD'}
                        </div>
                    </div>
                    <button onclick="saveFile()" class="btn btn-primary btn-sm gap-2">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4" />
                        </svg>
                        Save Changes
                    </button>
                </div>
                
                <div class="divider">Front Matter</div>
                <textarea 
                    id="frontmatter" 
                    class="textarea textarea-bordered w-full h-32 font-mono text-sm"
                    spellcheck="false"
                >${JSON.stringify(frontMatter, null, 2)}</textarea>
                
                <div class="divider">Content</div>
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
                    <div class="space-y-2">
                        <div class="flex justify-between items-center">
                            <label class="text-sm font-medium">Editor</label>
                            <div class="text-xs opacity-50">Markdown</div>
                        </div>
                        <textarea 
                            id="content" 
                            class="textarea textarea-bordered w-full h-[500px] font-mono text-sm"
                            onkeyup="updatePreview()"
                            spellcheck="false"
                        >${content}</textarea>
                    </div>
                    <div class="space-y-2">
                        <div class="flex justify-between items-center">
                            <label class="text-sm font-medium">Preview</label>
                            <div class="text-xs opacity-50">Rendered HTML</div>
                        </div>
                        <div id="preview" class="prose bg-base-200 p-4 rounded-lg overflow-auto h-[500px]"></div>
                    </div>
                </div>
            </div>
        `;
    }

    function updatePreview() {
        const content = document.getElementById('content').value;
        const preview = document.getElementById('preview');
        if (preview) {
            preview.innerHTML = marked.parse(content);
        }
    }

    async function saveFile() {
        if (!currentFile) return;

        const saveButton = document.querySelector('button[onclick="saveFile()"]');
        const originalText = saveButton.innerHTML;
        saveButton.innerHTML = '<span class="loading loading-spinner loading-sm"></span> Saving...';
        saveButton.disabled = true;

        try {
            let frontMatter;
            try {
                frontMatter = JSON.parse(document.getElementById('frontmatter').value);
            } catch (e) {
                throw new Error('Invalid front matter JSON format');
            }

            const content = document.getElementById('content').value;

            const response = await fetch('/github/files/save', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    path: currentFile.path,
                    frontMatter,
                    content,
                    sha: currentFile.sha
                })
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.details || 'Failed to save file');
            }

            const result = await response.json();
            if (result.success) {
                currentFile.sha = result.sha;
                saveButton.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg> Saved!';
                setTimeout(() => {
                    saveButton.innerHTML = originalText;
                }, 2000);
            }
        } catch (error) {
            console.error('Error saving file:', error);
            saveButton.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg> Error';
            alert(error.message || 'Error saving changes');
        } finally {
            saveButton.disabled = false;
            setTimeout(() => {
                saveButton.innerHTML = originalText;
            }, 2
